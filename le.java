import java.io.*;
import java.util.*;
class j
{
public static void main(String aa[])throws IOException
{
BufferedReader b=new BufferedReader(new InputStreamReader(System.in));
int x1,x2,y1,y2,x3,y3;
String s;
int d[]=new int[3];
s=b.readLine();
StringTokenizer c=new StringTokenizer(s);
x1=Integer.parseInt(c.nextToken());
y1=Integer.parseInt(c.nextToken());
x2=Integer.parseInt(c.nextToken());
y2=Integer.parseInt(c.nextToken());
x3=Integer.parseInt(c.nextToken());
y3=Integer.parseInt(c.nextToken());
d[0]=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
d[1]=(x1-x3)*(x1-x3)+(y1-y3)*(y1-y3);
d[2]=(x3-x2)*(x3-x2)+(y3-y2)*(y3-y2);
Arrays.sort(d);
if(d[0]+d[1]==d[2]&&d[0]!=0&&d[1]!=0&&d[2]!=0)
{
System.out.print("RIGHT");
System.exit(0);
}
x1++;
d[0]=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
d[1]=(x1-x3)*(x1-x3)+(y1-y3)*(y1-y3);
d[2]=(x3-x2)*(x3-x2)+(y3-y2)*(y3-y2);
Arrays.sort(d);
if(d[0]+d[1]==d[2]&&d[0]!=0&&d[1]!=0&&d[2]!=0)
{
System.out.print("ALMOST");
System.exit(0);
}
x1--;
y1++;
d[0]=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
d[1]=(x1-x3)*(x1-x3)+(y1-y3)*(y1-y3);
d[2]=(x3-x2)*(x3-x2)+(y3-y2)*(y3-y2);
Arrays.sort(d);
if(d[0]+d[1]==d[2]&&d[0]!=0&&d[1]!=0&&d[2]!=0)
{
System.out.print("ALMOST");
System.exit(0);
}
y1--;
x1--;
d[0]=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
d[1]=(x1-x3)*(x1-x3)+(y1-y3)*(y1-y3);
d[2]=(x3-x2)*(x3-x2)+(y3-y2)*(y3-y2);
Arrays.sort(d);
if(d[0]+d[1]==d[2]&&d[0]!=0&&d[1]!=0&&d[2]!=0)
{
System.out.print("ALMOST");
System.exit(0);
}
x1++;
y1--;
d[0]=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
d[1]=(x1-x3)*(x1-x3)+(y1-y3)*(y1-y3);
d[2]=(x3-x2)*(x3-x2)+(y3-y2)*(y3-y2);
Arrays.sort(d);
if(d[0]+d[1]==d[2]&&d[0]!=0&&d[1]!=0&&d[2]!=0)
{
System.out.print("ALMOST");
System.exit(0);
}
y1++;
x2++;
d[0]=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
d[1]=(x1-x3)*(x1-x3)+(y1-y3)*(y1-y3);
d[2]=(x3-x2)*(x3-x2)+(y3-y2)*(y3-y2);
Arrays.sort(d);
if(d[0]+d[1]==d[2]&&d[0]!=0&&d[1]!=0&&d[2]!=0)
{
System.out.print("ALMOST");
System.exit(0);
}
x2--;
y2++;
d[0]=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
d[1]=(x1-x3)*(x1-x3)+(y1-y3)*(y1-y3);
d[2]=(x3-x2)*(x3-x2)+(y3-y2)*(y3-y2);
Arrays.sort(d);
if(d[0]+d[1]==d[2]&&d[0]!=0&&d[1]!=0&&d[2]!=0)
{
System.out.print("ALMOST");
System.exit(0);
}
y2--;
x2--;
d[0]=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
d[1]=(x1-x3)*(x1-x3)+(y1-y3)*(y1-y3);
d[2]=(x3-x2)*(x3-x2)+(y3-y2)*(y3-y2);
Arrays.sort(d);
if(d[0]+d[1]==d[2]&&d[0]!=0&&d[1]!=0&&d[2]!=0)
{
System.out.print("ALMOST");
System.exit(0);
}
x2++;
y2--;
d[0]=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
d[1]=(x1-x3)*(x1-x3)+(y1-y3)*(y1-y3);
d[2]=(x3-x2)*(x3-x2)+(y3-y2)*(y3-y2);
Arrays.sort(d);
if(d[0]+d[1]==d[2]&&d[0]!=0&&d[1]!=0&&d[2]!=0)
{
System.out.print("ALMOST");
System.exit(0);
}
y2++;
x3++;
d[0]=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
d[1]=(x1-x3)*(x1-x3)+(y1-y3)*(y1-y3);
d[2]=(x3-x2)*(x3-x2)+(y3-y2)*(y3-y2);
Arrays.sort(d);
if(d[0]+d[1]==d[2]&&d[0]!=0&&d[1]!=0&&d[2]!=0)
{
System.out.print("ALMOST");
System.exit(0);
}
x3--;
y3++;
d[0]=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
d[1]=(x1-x3)*(x1-x3)+(y1-y3)*(y1-y3);
d[2]=(x3-x2)*(x3-x2)+(y3-y2)*(y3-y2);
Arrays.sort(d);
if(d[0]+d[1]==d[2]&&d[0]!=0&&d[1]!=0&&d[2]!=0)
{
System.out.print("ALMOST");
System.exit(0);
}
y3--;
x3--;
d[0]=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
d[1]=(x1-x3)*(x1-x3)+(y1-y3)*(y1-y3);
d[2]=(x3-x2)*(x3-x2)+(y3-y2)*(y3-y2);
Arrays.sort(d);
if(d[0]+d[1]==d[2]&&d[0]!=0&&d[1]!=0&&d[2]!=0)
{
System.out.print("ALMOST");
System.exit(0);
}
x3++;
y3--;
d[0]=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
d[1]=(x1-x3)*(x1-x3)+(y1-y3)*(y1-y3);
d[2]=(x3-x2)*(x3-x2)+(y3-y2)*(y3-y2);
Arrays.sort(d);
if(d[0]+d[1]==d[2]&&d[0]!=0&&d[1]!=0&&d[2]!=0)
{
System.out.print("ALMOST");
System.exit(0);
}
System.out.print("NEITHER");
}
}